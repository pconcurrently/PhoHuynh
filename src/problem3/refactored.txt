type Blockchain = 'Osmosis' | 'Ethereum' | 'Arbitrum' | 'Zilliqa' | 'Neo';

interface WalletBalance {
	currency: string;
	amount: number;
	blockchain: Blockchain;
}

interface FormattedWalletBalance extends WalletBalance {
	formatted: string;
}

interface WalletPageProps extends BoxProps {
	className?: string;
}

const BLOCKCHAIN_PRIORITIES: Record<Blockchain, number> = {
	Osmosis: 100,
	Ethereum: 50,
	Arbitrum: 30,
	Zilliqa: 20,
	Neo: 20,
};

const getPriority = (blockchain: Blockchain): number =>
	BLOCKCHAIN_PRIORITIES[blockchain] ?? -99;

const WalletPage: React.FC<WalletPageProps> = ({ className, ...rest }) => {
	const balances = useWalletBalances();
	const prices = usePrices();

	const sortedAndFormattedBalances = useMemo(() => {
		return balances
			.filter(
				(balance: WalletBalance) =>
					getPriority(balance.blockchain) > -99 && balance.amount > 0
			)
			.sort(
				(lhs: WalletBalance, rhs: WalletBalance) =>
					getPriority(rhs.blockchain) - getPriority(lhs.blockchain)
			)
			.map(
				(balance: WalletBalance): FormattedWalletBalance => ({
					...balance,
					formatted: balance.amount.toFixed(),
				})
			);
	}, [balances]);

	return (
		<div className={className} {...rest}>
			{sortedAndFormattedBalances.map((balance: FormattedWalletBalance) => {
				const usdValue = prices[balance.currency] * balance.amount;
				return (
					<WalletRow
						className={classes.row}
						key={`${balance.blockchain}-${balance.currency}`}
						amount={balance.amount}
						usdValue={usdValue}
						formattedAmount={balance.formatted}
					/>
				);
			})}
		</div>
	);
};
